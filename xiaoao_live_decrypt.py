import socket
import threading
import struct

'''
笑傲梦幻破解
将本地127.0.0.1的数据表转发至远程服务器，且展示往来数据包内容
'''

flag = 381990860
key = "FT@!xasd"
key_array = key.encode()

def decrypt_data(encrypted_data, key_array, flag):
    ret_buffer = bytearray()

    # Extract data length and encrypted data
    # data_length = struct.unpack('i', encrypted_data[8:12])[0]
    encrypted_buffer = encrypted_data[12:]

    for i in range(len(encrypted_buffer)):
        decode_byte = encrypted_buffer[i] ^ key_array[i % len(key_array)]
        ret_buffer.append(decode_byte)
    return ret_buffer


def live_decrypt(encrypted_data):
    decrypted_data = decrypt_data(encrypted_data, key_array, flag)
    decoded_str = decrypted_data[8:].decode('GB18030')
    print(decoded_str)

def forward_data(src_socket, dest_socket):
    while True:
        try:
            data = src_socket.recv(4096)
            print(live_decrypt(data))
            if not data:
                break
            dest_socket.send(data)
        except:
            break

def handle_client(client_socket, remote_host, remote_port):
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))

    client_to_remote_thread = threading.Thread(target=forward_data, args=(client_socket, remote_socket))
    remote_to_client_thread = threading.Thread(target=forward_data, args=(remote_socket, client_socket))

    client_to_remote_thread.start()
    remote_to_client_thread.start()

    client_to_remote_thread.join()
    remote_to_client_thread.join()

    client_socket.close()
    remote_socket.close()

def main():
    local_host = "127.0.0.1"
    local_port = 9097
    remote_host = "114.115.147.61"
    remote_port = 9097

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((local_host, local_port))
    server_socket.listen(5)

    print(f"[*] Listening on {local_host}:{local_port}")

    while True:
        try:
            client_socket, addr = server_socket.accept()
            print(f"[*] Accepted connection from {addr[0]}:{addr[1]}")
            client_handler = threading.Thread(target=handle_client, args=(client_socket, remote_host, remote_port))
            client_handler.start()
        except KeyboardInterrupt:
            print("\n[!] Server is shutting down.")
            break
        except Exception as e:
            print(f"Error: {e}")

    server_socket.close()

if __name__ == "__main__":
    main()
